
provider "aws" {
  region  = "eu-west-2"
  profile = "BUILD-NAME"
}
locals {
  region = "eu-west-2"
}
resource "aws_default_vpc" "default" {}
data "aws_subnets" "default" {
  filter {
    name   = "vpc-id"
    values = [aws_default_vpc.default.id]
  }
}
resource "aws_key_pair" "test_key_pair" {
  key_name   = "test"
  public_key = file(var.public_key_path)
}
resource "aws_security_group" "test_sg_1" {
  name        = "test-sg-1"
  description = "test"
  vpc_id      = aws_default_vpc.default.id
  ingress {
    description = "Ansible SSH"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["10.0.0.0/16"]
  }
}
resource "aws_instance" "test1" {
  # :arrows_anticlockwise: UPDATED: Amazon Linux 2 AMI
  ami                    = "ami-0c02fb55956c7d316" # Amazon Linux 2 for eu-west-2
  instance_type          = "t3.xlarge"
  key_name               = aws_key_pair.test_key_pair.key_name
  disable_api_termination = false
  vpc_security_group_ids = [aws_security_group.test_sg_1.id]
  subnet_id              = data.aws_subnets.default.ids[0]
  private_ip             = "x"
  # :white_tick: Added: Cloud-init user data to create users and install base packages
  user_data = <<-EOF
              #!/bin/bash
              yum update -y
              yum install -y git curl wget unzip
              # Add users and their public keys
              for user in NAMES; do
                  useradd -m -s /bin/bash $user
                  mkdir -p /home/$user/.ssh
                  chmod 700 /home/$user/.ssh
              done
              echo "${file("A.pub")}" > /home/A/.ssh/authorized_keys
              echo "${file("A.pub")}" > /home/A/.ssh/authorized_keys
              echo "${file("A.pub")}" > /home/A/.ssh/authorized_keys
              echo "${file("A.pub")}" > /home/A/.ssh/authorized_keys
              for user in NAMES; do
                  chown -R $user:$user /home/$user/.ssh
                  chmod 600 /home/$user/.ssh/authorized_keys
              done
              EOF
  root_block_device {
    volume_size = 50
    volume_type = "gp2"
    encrypted   = true
  }
  lifecycle {
    ignore_changes = [
      ami
    ]
  }
  tags = {
    Name = "test"
  }
}


